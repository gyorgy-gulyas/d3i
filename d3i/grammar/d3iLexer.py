# Generated from ./d3i/grammar/d3iLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,353,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
        1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,4,37,
        291,8,37,11,37,12,37,292,1,38,4,38,296,8,38,11,38,12,38,297,1,38,
        1,38,4,38,302,8,38,11,38,12,38,303,1,39,1,39,5,39,308,8,39,10,39,
        12,39,311,9,39,1,39,1,39,1,40,1,40,5,40,317,8,40,10,40,12,40,320,
        9,40,1,41,4,41,323,8,41,11,41,12,41,324,1,41,1,41,1,42,1,42,1,42,
        1,42,5,42,333,8,42,10,42,12,42,336,9,42,1,42,1,42,1,43,1,43,1,43,
        1,43,5,43,344,8,43,10,43,12,43,347,9,43,1,43,1,43,1,43,1,43,1,43,
        2,309,345,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,1,0,26,2,0,68,68,100,100,2,0,79,79,111,111,2,0,77,77,109,109,
        2,0,65,65,97,97,2,0,73,73,105,105,2,0,78,78,110,110,2,0,67,67,99,
        99,2,0,84,84,116,116,2,0,69,69,101,101,2,0,88,88,120,120,2,0,86,
        86,118,118,2,0,89,89,121,121,2,0,71,71,103,103,2,0,82,82,114,114,
        2,0,83,83,115,115,2,0,70,70,102,102,2,0,76,76,108,108,2,0,85,85,
        117,117,2,0,66,66,98,98,2,0,74,74,106,106,2,0,80,80,112,112,1,0,
        48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,
        13,32,32,2,0,10,10,13,13,360,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,1,89,1,0,0,0,3,91,1,0,0,0,5,93,1,0,0,0,7,95,1,0,0,0,9,
        97,1,0,0,0,11,99,1,0,0,0,13,101,1,0,0,0,15,103,1,0,0,0,17,105,1,
        0,0,0,19,107,1,0,0,0,21,109,1,0,0,0,23,112,1,0,0,0,25,114,1,0,0,
        0,27,121,1,0,0,0,29,129,1,0,0,0,31,135,1,0,0,0,33,142,1,0,0,0,35,
        152,1,0,0,0,37,160,1,0,0,0,39,170,1,0,0,0,41,174,1,0,0,0,43,186,
        1,0,0,0,45,191,1,0,0,0,47,202,1,0,0,0,49,207,1,0,0,0,51,210,1,0,
        0,0,53,218,1,0,0,0,55,225,1,0,0,0,57,231,1,0,0,0,59,236,1,0,0,0,
        61,241,1,0,0,0,63,250,1,0,0,0,65,257,1,0,0,0,67,265,1,0,0,0,69,271,
        1,0,0,0,71,276,1,0,0,0,73,280,1,0,0,0,75,290,1,0,0,0,77,295,1,0,
        0,0,79,305,1,0,0,0,81,314,1,0,0,0,83,322,1,0,0,0,85,328,1,0,0,0,
        87,339,1,0,0,0,89,90,5,46,0,0,90,2,1,0,0,0,91,92,5,44,0,0,92,4,1,
        0,0,0,93,94,5,58,0,0,94,6,1,0,0,0,95,96,5,40,0,0,96,8,1,0,0,0,97,
        98,5,41,0,0,98,10,1,0,0,0,99,100,5,123,0,0,100,12,1,0,0,0,101,102,
        5,125,0,0,102,14,1,0,0,0,103,104,5,91,0,0,104,16,1,0,0,0,105,106,
        5,93,0,0,106,18,1,0,0,0,107,108,5,64,0,0,108,20,1,0,0,0,109,110,
        5,61,0,0,110,111,5,62,0,0,111,22,1,0,0,0,112,113,5,124,0,0,113,24,
        1,0,0,0,114,115,7,0,0,0,115,116,7,1,0,0,116,117,7,2,0,0,117,118,
        7,3,0,0,118,119,7,4,0,0,119,120,7,5,0,0,120,26,1,0,0,0,121,122,7,
        6,0,0,122,123,7,1,0,0,123,124,7,5,0,0,124,125,7,7,0,0,125,126,7,
        8,0,0,126,127,7,9,0,0,127,128,7,7,0,0,128,28,1,0,0,0,129,130,7,8,
        0,0,130,131,7,10,0,0,131,132,7,8,0,0,132,133,7,5,0,0,133,134,7,7,
        0,0,134,30,1,0,0,0,135,136,7,8,0,0,136,137,7,5,0,0,137,138,7,7,0,
        0,138,139,7,4,0,0,139,140,7,7,0,0,140,141,7,11,0,0,141,32,1,0,0,
        0,142,143,7,3,0,0,143,144,7,12,0,0,144,145,7,12,0,0,145,146,7,13,
        0,0,146,147,7,8,0,0,147,148,7,12,0,0,148,149,7,3,0,0,149,150,7,7,
        0,0,150,151,7,8,0,0,151,34,1,0,0,0,152,153,7,14,0,0,153,154,7,8,
        0,0,154,155,7,13,0,0,155,156,7,10,0,0,156,157,7,4,0,0,157,158,7,
        6,0,0,158,159,7,8,0,0,159,36,1,0,0,0,160,161,7,4,0,0,161,162,7,5,
        0,0,162,163,7,7,0,0,163,164,7,8,0,0,164,165,7,13,0,0,165,166,7,15,
        0,0,166,167,7,3,0,0,167,168,7,6,0,0,168,169,7,8,0,0,169,38,1,0,0,
        0,170,171,7,3,0,0,171,172,7,6,0,0,172,173,7,16,0,0,173,40,1,0,0,
        0,174,175,7,10,0,0,175,176,7,3,0,0,176,177,7,16,0,0,177,178,7,17,
        0,0,178,179,7,8,0,0,179,180,7,1,0,0,180,181,7,18,0,0,181,182,7,19,
        0,0,182,183,7,8,0,0,183,184,7,6,0,0,184,185,7,7,0,0,185,42,1,0,0,
        0,186,187,7,8,0,0,187,188,7,5,0,0,188,189,7,17,0,0,189,190,7,2,0,
        0,190,44,1,0,0,0,191,192,7,13,0,0,192,193,7,8,0,0,193,194,7,20,0,
        0,194,195,7,1,0,0,195,196,7,14,0,0,196,197,7,4,0,0,197,198,7,7,0,
        0,198,199,7,1,0,0,199,200,7,13,0,0,200,201,7,11,0,0,201,46,1,0,0,
        0,202,203,7,13,0,0,203,204,7,1,0,0,204,205,7,1,0,0,205,206,7,7,0,
        0,206,48,1,0,0,0,207,208,7,1,0,0,208,209,7,13,0,0,209,50,1,0,0,0,
        210,211,7,4,0,0,211,212,7,5,0,0,212,213,7,7,0,0,213,214,7,8,0,0,
        214,215,7,12,0,0,215,216,7,8,0,0,216,217,7,13,0,0,217,52,1,0,0,0,
        218,219,7,5,0,0,219,220,7,17,0,0,220,221,7,2,0,0,221,222,7,18,0,
        0,222,223,7,8,0,0,223,224,7,13,0,0,224,54,1,0,0,0,225,226,7,15,0,
        0,226,227,7,16,0,0,227,228,7,1,0,0,228,229,7,3,0,0,229,230,7,7,0,
        0,230,56,1,0,0,0,231,232,7,0,0,0,232,233,7,3,0,0,233,234,7,7,0,0,
        234,235,7,8,0,0,235,58,1,0,0,0,236,237,7,7,0,0,237,238,7,4,0,0,238,
        239,7,2,0,0,239,240,7,8,0,0,240,60,1,0,0,0,241,242,7,0,0,0,242,243,
        7,3,0,0,243,244,7,7,0,0,244,245,7,8,0,0,245,246,7,7,0,0,246,247,
        7,4,0,0,247,248,7,2,0,0,248,249,7,8,0,0,249,62,1,0,0,0,250,251,7,
        14,0,0,251,252,7,7,0,0,252,253,7,13,0,0,253,254,7,4,0,0,254,255,
        7,5,0,0,255,256,7,12,0,0,256,64,1,0,0,0,257,258,7,18,0,0,258,259,
        7,1,0,0,259,260,7,1,0,0,260,261,7,16,0,0,261,262,7,8,0,0,262,263,
        7,3,0,0,263,264,7,5,0,0,264,66,1,0,0,0,265,266,7,18,0,0,266,267,
        7,11,0,0,267,268,7,7,0,0,268,269,7,8,0,0,269,270,7,14,0,0,270,68,
        1,0,0,0,271,272,7,16,0,0,272,273,7,4,0,0,273,274,7,14,0,0,274,275,
        7,7,0,0,275,70,1,0,0,0,276,277,7,2,0,0,277,278,7,3,0,0,278,279,7,
        20,0,0,279,72,1,0,0,0,280,281,7,8,0,0,281,282,7,9,0,0,282,283,7,
        7,0,0,283,284,7,8,0,0,284,285,7,13,0,0,285,286,7,5,0,0,286,287,7,
        3,0,0,287,288,7,16,0,0,288,74,1,0,0,0,289,291,7,21,0,0,290,289,1,
        0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,76,1,0,
        0,0,294,296,7,21,0,0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,
        0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,5,46,0,0,300,302,7,21,
        0,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,
        0,0,304,78,1,0,0,0,305,309,5,34,0,0,306,308,9,0,0,0,307,306,1,0,
        0,0,308,311,1,0,0,0,309,310,1,0,0,0,309,307,1,0,0,0,310,312,1,0,
        0,0,311,309,1,0,0,0,312,313,5,34,0,0,313,80,1,0,0,0,314,318,7,22,
        0,0,315,317,7,23,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,
        0,0,318,319,1,0,0,0,319,82,1,0,0,0,320,318,1,0,0,0,321,323,7,24,
        0,0,322,321,1,0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,
        0,0,325,326,1,0,0,0,326,327,6,41,0,0,327,84,1,0,0,0,328,329,5,47,
        0,0,329,330,5,47,0,0,330,334,1,0,0,0,331,333,8,25,0,0,332,331,1,
        0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,337,1,
        0,0,0,336,334,1,0,0,0,337,338,6,42,1,0,338,86,1,0,0,0,339,340,5,
        47,0,0,340,341,5,42,0,0,341,345,1,0,0,0,342,344,9,0,0,0,343,342,
        1,0,0,0,344,347,1,0,0,0,345,346,1,0,0,0,345,343,1,0,0,0,346,348,
        1,0,0,0,347,345,1,0,0,0,348,349,5,42,0,0,349,350,5,47,0,0,350,351,
        1,0,0,0,351,352,6,43,1,0,352,88,1,0,0,0,9,0,292,297,303,309,318,
        324,334,345,2,6,0,0,0,2,0
    ]

class d3iLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT_CHANNEL = 2

    DOT = 1
    COMMA = 2
    SEMI = 3
    LPAREN = 4
    RPAREN = 5
    LCURLY = 6
    RCURLY = 7
    LBARCKET = 8
    RBRACKET = 9
    AT = 10
    ARROW = 11
    PIPE = 12
    DOMAIN = 13
    CONTEXT = 14
    EVENT = 15
    ENTITY = 16
    AGGREGATE = 17
    SERVICE = 18
    INTERFACE = 19
    ACL = 20
    VALUEOBJECT = 21
    ENUM = 22
    REPOSITORY = 23
    ROOT = 24
    OR = 25
    INTEGER = 26
    NUMBER = 27
    FLOAT = 28
    DATE = 29
    TIME = 30
    DATETIME = 31
    STRING = 32
    BOOLEAN = 33
    BYTES = 34
    LIST = 35
    MAP = 36
    EXTERNAL = 37
    INTEGER_CONSTANS = 38
    NUMBER_CONSTANS = 39
    STRING_LITERAL = 40
    IDENTIFIER = 41
    WS = 42
    LINE_COMMENT = 43
    BLOCK_COMMENT = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN", u"COMMENT_CHANNEL" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "','", "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
            "'@'", "'=>'", "'|'", "'domain'", "'context'", "'event'", "'entity'", 
            "'aggregate'", "'service'", "'interface'", "'acl'", "'valueobject'", 
            "'enum'", "'repository'", "'root'", "'or'", "'integer'", "'number'", 
            "'float'", "'date'", "'time'", "'dateTime'", "'string'", "'boolean'", 
            "'bytes'", "'list'", "'map'", "'external'" ]

    symbolicNames = [ "<INVALID>",
            "DOT", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
            "LBARCKET", "RBRACKET", "AT", "ARROW", "PIPE", "DOMAIN", "CONTEXT", 
            "EVENT", "ENTITY", "AGGREGATE", "SERVICE", "INTERFACE", "ACL", 
            "VALUEOBJECT", "ENUM", "REPOSITORY", "ROOT", "OR", "INTEGER", 
            "NUMBER", "FLOAT", "DATE", "TIME", "DATETIME", "STRING", "BOOLEAN", 
            "BYTES", "LIST", "MAP", "EXTERNAL", "INTEGER_CONSTANS", "NUMBER_CONSTANS", 
            "STRING_LITERAL", "IDENTIFIER", "WS", "LINE_COMMENT", "BLOCK_COMMENT" ]

    ruleNames = [ "DOT", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", 
                  "RCURLY", "LBARCKET", "RBRACKET", "AT", "ARROW", "PIPE", 
                  "DOMAIN", "CONTEXT", "EVENT", "ENTITY", "AGGREGATE", "SERVICE", 
                  "INTERFACE", "ACL", "VALUEOBJECT", "ENUM", "REPOSITORY", 
                  "ROOT", "OR", "INTEGER", "NUMBER", "FLOAT", "DATE", "TIME", 
                  "DATETIME", "STRING", "BOOLEAN", "BYTES", "LIST", "MAP", 
                  "EXTERNAL", "INTEGER_CONSTANS", "NUMBER_CONSTANS", "STRING_LITERAL", 
                  "IDENTIFIER", "WS", "LINE_COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "d3iLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


