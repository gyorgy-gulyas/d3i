# Generated from ./d3i/grammar/d3iLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,371,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
        24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
        28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
        34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,39,4,39,309,8,39,11,39,12,39,310,1,40,4,40,314,8,
        40,11,40,12,40,315,1,40,1,40,4,40,320,8,40,11,40,12,40,321,1,41,
        1,41,5,41,326,8,41,10,41,12,41,329,9,41,1,41,1,41,1,42,1,42,5,42,
        335,8,42,10,42,12,42,338,9,42,1,43,4,43,341,8,43,11,43,12,43,342,
        1,43,1,43,1,44,1,44,1,44,1,44,5,44,351,8,44,10,44,12,44,354,9,44,
        1,44,1,44,1,45,1,45,1,45,1,45,5,45,362,8,45,10,45,12,45,365,9,45,
        1,45,1,45,1,45,1,45,1,45,2,327,363,0,46,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,1,0,28,2,0,68,68,100,100,
        2,0,79,79,111,111,2,0,77,77,109,109,2,0,65,65,97,97,2,0,73,73,105,
        105,2,0,78,78,110,110,2,0,67,67,99,99,2,0,84,84,116,116,2,0,69,69,
        101,101,2,0,88,88,120,120,2,0,86,86,118,118,2,0,89,89,121,121,2,
        0,71,71,103,103,2,0,82,82,114,114,2,0,87,87,119,119,2,0,83,83,115,
        115,2,0,70,70,102,102,2,0,76,76,108,108,2,0,85,85,117,117,2,0,66,
        66,98,98,2,0,74,74,106,106,2,0,80,80,112,112,2,0,72,72,104,104,1,
        0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,
        13,32,32,2,0,10,10,13,13,378,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,95,1,0,0,0,5,
        97,1,0,0,0,7,99,1,0,0,0,9,101,1,0,0,0,11,103,1,0,0,0,13,105,1,0,
        0,0,15,107,1,0,0,0,17,109,1,0,0,0,19,111,1,0,0,0,21,113,1,0,0,0,
        23,116,1,0,0,0,25,118,1,0,0,0,27,125,1,0,0,0,29,133,1,0,0,0,31,139,
        1,0,0,0,33,146,1,0,0,0,35,156,1,0,0,0,37,161,1,0,0,0,39,169,1,0,
        0,0,41,179,1,0,0,0,43,183,1,0,0,0,45,195,1,0,0,0,47,200,1,0,0,0,
        49,211,1,0,0,0,51,216,1,0,0,0,53,219,1,0,0,0,55,227,1,0,0,0,57,234,
        1,0,0,0,59,240,1,0,0,0,61,245,1,0,0,0,63,250,1,0,0,0,65,259,1,0,
        0,0,67,266,1,0,0,0,69,274,1,0,0,0,71,280,1,0,0,0,73,285,1,0,0,0,
        75,289,1,0,0,0,77,298,1,0,0,0,79,308,1,0,0,0,81,313,1,0,0,0,83,323,
        1,0,0,0,85,332,1,0,0,0,87,340,1,0,0,0,89,346,1,0,0,0,91,357,1,0,
        0,0,93,94,5,46,0,0,94,2,1,0,0,0,95,96,5,44,0,0,96,4,1,0,0,0,97,98,
        5,58,0,0,98,6,1,0,0,0,99,100,5,40,0,0,100,8,1,0,0,0,101,102,5,41,
        0,0,102,10,1,0,0,0,103,104,5,123,0,0,104,12,1,0,0,0,105,106,5,125,
        0,0,106,14,1,0,0,0,107,108,5,91,0,0,108,16,1,0,0,0,109,110,5,93,
        0,0,110,18,1,0,0,0,111,112,5,64,0,0,112,20,1,0,0,0,113,114,5,61,
        0,0,114,115,5,62,0,0,115,22,1,0,0,0,116,117,5,124,0,0,117,24,1,0,
        0,0,118,119,7,0,0,0,119,120,7,1,0,0,120,121,7,2,0,0,121,122,7,3,
        0,0,122,123,7,4,0,0,123,124,7,5,0,0,124,26,1,0,0,0,125,126,7,6,0,
        0,126,127,7,1,0,0,127,128,7,5,0,0,128,129,7,7,0,0,129,130,7,8,0,
        0,130,131,7,9,0,0,131,132,7,7,0,0,132,28,1,0,0,0,133,134,7,8,0,0,
        134,135,7,10,0,0,135,136,7,8,0,0,136,137,7,5,0,0,137,138,7,7,0,0,
        138,30,1,0,0,0,139,140,7,8,0,0,140,141,7,5,0,0,141,142,7,7,0,0,142,
        143,7,4,0,0,143,144,7,7,0,0,144,145,7,11,0,0,145,32,1,0,0,0,146,
        147,7,3,0,0,147,148,7,12,0,0,148,149,7,12,0,0,149,150,7,13,0,0,150,
        151,7,8,0,0,151,152,7,12,0,0,152,153,7,3,0,0,153,154,7,7,0,0,154,
        155,7,8,0,0,155,34,1,0,0,0,156,157,7,10,0,0,157,158,7,4,0,0,158,
        159,7,8,0,0,159,160,7,14,0,0,160,36,1,0,0,0,161,162,7,15,0,0,162,
        163,7,8,0,0,163,164,7,13,0,0,164,165,7,10,0,0,165,166,7,4,0,0,166,
        167,7,6,0,0,167,168,7,8,0,0,168,38,1,0,0,0,169,170,7,4,0,0,170,171,
        7,5,0,0,171,172,7,7,0,0,172,173,7,8,0,0,173,174,7,13,0,0,174,175,
        7,16,0,0,175,176,7,3,0,0,176,177,7,6,0,0,177,178,7,8,0,0,178,40,
        1,0,0,0,179,180,7,3,0,0,180,181,7,6,0,0,181,182,7,17,0,0,182,42,
        1,0,0,0,183,184,7,10,0,0,184,185,7,3,0,0,185,186,7,17,0,0,186,187,
        7,18,0,0,187,188,7,8,0,0,188,189,7,1,0,0,189,190,7,19,0,0,190,191,
        7,20,0,0,191,192,7,8,0,0,192,193,7,6,0,0,193,194,7,7,0,0,194,44,
        1,0,0,0,195,196,7,8,0,0,196,197,7,5,0,0,197,198,7,18,0,0,198,199,
        7,2,0,0,199,46,1,0,0,0,200,201,7,13,0,0,201,202,7,8,0,0,202,203,
        7,21,0,0,203,204,7,1,0,0,204,205,7,15,0,0,205,206,7,4,0,0,206,207,
        7,7,0,0,207,208,7,1,0,0,208,209,7,13,0,0,209,210,7,11,0,0,210,48,
        1,0,0,0,211,212,7,13,0,0,212,213,7,1,0,0,213,214,7,1,0,0,214,215,
        7,7,0,0,215,50,1,0,0,0,216,217,7,1,0,0,217,218,7,13,0,0,218,52,1,
        0,0,0,219,220,7,4,0,0,220,221,7,5,0,0,221,222,7,7,0,0,222,223,7,
        8,0,0,223,224,7,12,0,0,224,225,7,8,0,0,225,226,7,13,0,0,226,54,1,
        0,0,0,227,228,7,5,0,0,228,229,7,18,0,0,229,230,7,2,0,0,230,231,7,
        19,0,0,231,232,7,8,0,0,232,233,7,13,0,0,233,56,1,0,0,0,234,235,7,
        16,0,0,235,236,7,17,0,0,236,237,7,1,0,0,237,238,7,3,0,0,238,239,
        7,7,0,0,239,58,1,0,0,0,240,241,7,0,0,0,241,242,7,3,0,0,242,243,7,
        7,0,0,243,244,7,8,0,0,244,60,1,0,0,0,245,246,7,7,0,0,246,247,7,4,
        0,0,247,248,7,2,0,0,248,249,7,8,0,0,249,62,1,0,0,0,250,251,7,0,0,
        0,251,252,7,3,0,0,252,253,7,7,0,0,253,254,7,8,0,0,254,255,7,7,0,
        0,255,256,7,4,0,0,256,257,7,2,0,0,257,258,7,8,0,0,258,64,1,0,0,0,
        259,260,7,15,0,0,260,261,7,7,0,0,261,262,7,13,0,0,262,263,7,4,0,
        0,263,264,7,5,0,0,264,265,7,12,0,0,265,66,1,0,0,0,266,267,7,19,0,
        0,267,268,7,1,0,0,268,269,7,1,0,0,269,270,7,17,0,0,270,271,7,8,0,
        0,271,272,7,3,0,0,272,273,7,5,0,0,273,68,1,0,0,0,274,275,7,19,0,
        0,275,276,7,11,0,0,276,277,7,7,0,0,277,278,7,8,0,0,278,279,7,15,
        0,0,279,70,1,0,0,0,280,281,7,17,0,0,281,282,7,4,0,0,282,283,7,15,
        0,0,283,284,7,7,0,0,284,72,1,0,0,0,285,286,7,2,0,0,286,287,7,3,0,
        0,287,288,7,21,0,0,288,74,1,0,0,0,289,290,7,8,0,0,290,291,7,9,0,
        0,291,292,7,7,0,0,292,293,7,8,0,0,293,294,7,13,0,0,294,295,7,5,0,
        0,295,296,7,3,0,0,296,297,7,17,0,0,297,76,1,0,0,0,298,299,7,4,0,
        0,299,300,7,5,0,0,300,301,7,22,0,0,301,302,7,8,0,0,302,303,7,13,
        0,0,303,304,7,4,0,0,304,305,7,7,0,0,305,306,7,15,0,0,306,78,1,0,
        0,0,307,309,7,23,0,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,
        0,0,310,311,1,0,0,0,311,80,1,0,0,0,312,314,7,23,0,0,313,312,1,0,
        0,0,314,315,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,317,1,0,
        0,0,317,319,5,46,0,0,318,320,7,23,0,0,319,318,1,0,0,0,320,321,1,
        0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,82,1,0,0,0,323,327,5,34,
        0,0,324,326,9,0,0,0,325,324,1,0,0,0,326,329,1,0,0,0,327,328,1,0,
        0,0,327,325,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,331,5,34,
        0,0,331,84,1,0,0,0,332,336,7,24,0,0,333,335,7,25,0,0,334,333,1,0,
        0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,86,1,0,0,
        0,338,336,1,0,0,0,339,341,7,26,0,0,340,339,1,0,0,0,341,342,1,0,0,
        0,342,340,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,345,6,43,0,
        0,345,88,1,0,0,0,346,347,5,47,0,0,347,348,5,47,0,0,348,352,1,0,0,
        0,349,351,8,27,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,
        0,352,353,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,356,6,44,1,
        0,356,90,1,0,0,0,357,358,5,47,0,0,358,359,5,42,0,0,359,363,1,0,0,
        0,360,362,9,0,0,0,361,360,1,0,0,0,362,365,1,0,0,0,363,364,1,0,0,
        0,363,361,1,0,0,0,364,366,1,0,0,0,365,363,1,0,0,0,366,367,5,42,0,
        0,367,368,5,47,0,0,368,369,1,0,0,0,369,370,6,45,1,0,370,92,1,0,0,
        0,9,0,310,315,321,327,336,342,352,363,2,6,0,0,0,2,0
    ]

class d3iLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT_CHANNEL = 2

    DOT = 1
    COMMA = 2
    SEMI = 3
    LPAREN = 4
    RPAREN = 5
    LCURLY = 6
    RCURLY = 7
    LBARCKET = 8
    RBRACKET = 9
    AT = 10
    ARROW = 11
    PIPE = 12
    DOMAIN = 13
    CONTEXT = 14
    EVENT = 15
    ENTITY = 16
    AGGREGATE = 17
    VIEW = 18
    SERVICE = 19
    INTERFACE = 20
    ACL = 21
    VALUEOBJECT = 22
    ENUM = 23
    REPOSITORY = 24
    ROOT = 25
    OR = 26
    INTEGER = 27
    NUMBER = 28
    FLOAT = 29
    DATE = 30
    TIME = 31
    DATETIME = 32
    STRING = 33
    BOOLEAN = 34
    BYTES = 35
    LIST = 36
    MAP = 37
    EXTERNAL = 38
    INHERITS = 39
    INTEGER_CONSTANS = 40
    NUMBER_CONSTANS = 41
    STRING_LITERAL = 42
    IDENTIFIER = 43
    WS = 44
    LINE_COMMENT = 45
    BLOCK_COMMENT = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN", u"COMMENT_CHANNEL" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "','", "':'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
            "'@'", "'=>'", "'|'", "'domain'", "'context'", "'event'", "'entity'", 
            "'aggregate'", "'view'", "'service'", "'interface'", "'acl'", 
            "'valueobject'", "'enum'", "'repository'", "'root'", "'or'", 
            "'integer'", "'number'", "'float'", "'date'", "'time'", "'dateTime'", 
            "'string'", "'boolean'", "'bytes'", "'list'", "'map'", "'external'", 
            "'inherits'" ]

    symbolicNames = [ "<INVALID>",
            "DOT", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", "RCURLY", 
            "LBARCKET", "RBRACKET", "AT", "ARROW", "PIPE", "DOMAIN", "CONTEXT", 
            "EVENT", "ENTITY", "AGGREGATE", "VIEW", "SERVICE", "INTERFACE", 
            "ACL", "VALUEOBJECT", "ENUM", "REPOSITORY", "ROOT", "OR", "INTEGER", 
            "NUMBER", "FLOAT", "DATE", "TIME", "DATETIME", "STRING", "BOOLEAN", 
            "BYTES", "LIST", "MAP", "EXTERNAL", "INHERITS", "INTEGER_CONSTANS", 
            "NUMBER_CONSTANS", "STRING_LITERAL", "IDENTIFIER", "WS", "LINE_COMMENT", 
            "BLOCK_COMMENT" ]

    ruleNames = [ "DOT", "COMMA", "SEMI", "LPAREN", "RPAREN", "LCURLY", 
                  "RCURLY", "LBARCKET", "RBRACKET", "AT", "ARROW", "PIPE", 
                  "DOMAIN", "CONTEXT", "EVENT", "ENTITY", "AGGREGATE", "VIEW", 
                  "SERVICE", "INTERFACE", "ACL", "VALUEOBJECT", "ENUM", 
                  "REPOSITORY", "ROOT", "OR", "INTEGER", "NUMBER", "FLOAT", 
                  "DATE", "TIME", "DATETIME", "STRING", "BOOLEAN", "BYTES", 
                  "LIST", "MAP", "EXTERNAL", "INHERITS", "INTEGER_CONSTANS", 
                  "NUMBER_CONSTANS", "STRING_LITERAL", "IDENTIFIER", "WS", 
                  "LINE_COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "d3iLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


