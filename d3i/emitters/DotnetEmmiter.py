import os
import io
from d3i.elements.Elements import *

class DotnetEmmiter:
    def __create_folder__(output_dir: str, folder_name: str):
        folder_path = os.path.join(output_dir, folder_name)
        os.makedirs(folder_path, exist_ok=True)

    def __create_cs_file__(output_dir: str, file_name: str, content: str):
        file_path = os.path.join(output_dir, file_name + ".cs")
        with open(file_path, "w") as file:
            file.write(content)

    def fileHeader():
        return """
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------"""

    def contextEnumText(domain: domain, context: context, enum: enum):
        buffer = io.StringIO()
        buffer.write(dotnet_emmiter.fileHeader())
        buffer.write("\n")
        buffer.write(f"namespace {domain.name}.{context.name}")
        buffer.write("{")
        buffer.write(f"{dotnet_emmiter.enumText(enum, indent=1)}")
        buffer.write("}")
        return buffer.getvalue()

    def contextValueObjectText(domain: domain, context: context, value_object: value_object):
        buffer = io.StringIO()
        buffer.write(dotnet_emmiter.fileHeader())
        buffer.write("\n")
        buffer.write(f"namespace {domain.name}.{context.name}")
        buffer.write("{")
        buffer.write(f"\t{dotnet_emmiter.valueObjectText(value_object)}")
        buffer.write("}")
        return buffer.getvalue()

    def enumText(enum: enum, indent: int = 1):
        buffer = io.StringIO()
        buffer.write("\n")
        buffer.write(f"{'\t'*indent}enum {enum.name}")
        buffer.write("{")
        for enum_element in enum.enum_elements:
            buffer.write(f"{'\t'*(indent+1)}{enum_element.value},")
        buffer.write(f"{'\t'*indent}enum {enum.name}")
        return buffer.getvalue()

    def valueObjectText(value_object: value_object, indent: int = 1):
        buffer = io.StringIO()
        buffer.write("\n")
        buffer.write(f"{'\t'*indent}enum {enum.name}")
        buffer.write("{")
        for member in value_object.members:
            buffer.write(f"{dotnet_emmiter.memberText(member.name, member.type, indent+1)},")
        buffer.write(f"{'\t'*indent}enum {enum.name}")
        return buffer.getvalue()

    def memberText(member_name: str, type: type, indent: int):
        buffer = io.StringIO()
        buffer.write(f"{'\t'*indent}public {dotnet_emmiter.typeText(type)} {member_name} {{ get; set; }}")
        return buffer.getvalue()

    def typeText(type: type):
        match type.kind:
            case type.Kind.Primitive:
                return dotnet_emmiter.typeTextPrimitive(type)
            case type.Kind.Reference:
                return dotnet_emmiter.typeTextReference(type)
            case type.Kind.List:
                return dotnet_emmiter.typeTextList(type)
            case type.Kind.Map:
                return dotnet_emmiter.typeTextMap(type)

    def typeTextPrimitive(type: primitive_type, indent: int):
        match type.primtiveKind:
            case primitive_type.PrimtiveKind.Integer:
                return "int"
            case primitive_type.PrimtiveKind.Number:
                return "decimal"
            case primitive_type.PrimtiveKind.Float:
                return "double"
            case primitive_type.PrimtiveKind.Date:
                return "System.DateOnly"
            case primitive_type.PrimtiveKind.Time:
                return "System.TimeOnly"
            case primitive_type.PrimtiveKind.DateTime:
                return "System.DateTime"
            case primitive_type.PrimtiveKind.String:
                return "string"
            case primitive_type.PrimtiveKind.Boolean:
                return "bool"
            case primitive_type.PrimtiveKind.Bytes:
                return "byte[]"

    def typeTextReference(type: reference_type, indent: int):
        return type.reference_name.getText()

    def typeTextList(type: list_type, indent: int):
        return f"System.Generic.List<{dotnet_emmiter.typeText(type.item_type)}>"

    def typeTextMap(type: map_type, indent: int):
        return f"System.Generic.Dictionary<{dotnet_emmiter.typeText(type.key_type)},{dotnet_emmiter.typeText(type.value_type)}>"
