import unittest
import d3i
from d3i.emitters.dotnet_emmiter.ContextEmitter import *


class TestEmitterDotnetDefault(unittest.TestCase):

    def test_contextemitter_enum_ok(self):
        engine = d3i.Engine()
        session = d3i.Session()
        session.AddSource(d3i.Source.CreateFromText("""
domain WebShop {
    context CustomerContext {
        enum CustomerType{
            PrivatePerson,
            Company
        }
    }
}
"""))
        root = engine.Build(session)
        emitter = ContextEmmiter()
        result = emitter.Emit( session )
        expected = """
// <auto-generated>
//     This code was generated by d3i.interpreter
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
using System;
using System.Collections.Generic;

namespace WebShop.CustomerContext
{
    enum CustomerType
    {
        PrivatePerson,
        Company,
    }
}
"""
        good = __create_roslyn_syntax_tree__(expected)

        print(result)



def __create_roslyn_syntax_tree__(csharp_code:str):
    from pathlib import Path
    from pythonnet import get_runtime_info, set_runtime
    set_runtime("coreclr")
    import clr
    print(get_runtime_info())

    clr.AddReference(str(Path("./tools/dotnet_dlls/netstandard2.0/Microsoft.CodeAnalysis.dll").resolve()))
    clr.AddReference(str(Path("./tools/dotnet_dlls/netstandard2.0/Microsoft.CodeAnalysis.CSharp.dll").resolve()))
    from Microsoft.CodeAnalysis.CSharp import CSharpSyntaxTree
    from Microsoft.CodeAnalysis import SyntaxTree    

    try:
        # Translate C# code to syntax tree
        tree: SyntaxTree = CSharpSyntaxTree.ParseText(csharp_code)
        diagnostics = tree.GetDiagnostics()
        
        #  If there are diagnostic errors, the code is not valid
        errors = [diag for diag in diagnostics if diag.Severity == 2]
        return len(errors) == 0
    except Exception as e:
        print(f"Hiba történt: {e}")
        return False

if __name__ == "__main__":
    unittest.main()
